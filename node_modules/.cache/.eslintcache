[{"E:\\codefield\\csc301\\visualize_sorter_react\\src\\index.js":"1","E:\\codefield\\csc301\\visualize_sorter_react\\src\\serviceWorker.js":"2","E:\\codefield\\csc301\\visualize_sorter_react\\src\\App.js":"3","E:\\codefield\\csc301\\visualize_sorter_react\\src\\SortingVisualizer\\SortingVisualizer.jsx":"4","E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\sortingAlgorithms.js":"5","E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\BubbleSort.js":"6","E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\insertionSort.js":"7","E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\QuickSort.js":"8","E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\selectionSort.js":"9"},{"size":520,"mtime":1645995953042,"results":"10","hashOfConfig":"11"},{"size":5227,"mtime":1645995953043,"results":"12","hashOfConfig":"11"},{"size":272,"mtime":1645995953041,"results":"13","hashOfConfig":"11"},{"size":12436,"mtime":1646002457349,"results":"14","hashOfConfig":"11"},{"size":5211,"mtime":1645999090235,"results":"15","hashOfConfig":"11"},{"size":1578,"mtime":1645995953043,"results":"16","hashOfConfig":"11"},{"size":1363,"mtime":1645995953043,"results":"17","hashOfConfig":"11"},{"size":2519,"mtime":1645995953043,"results":"18","hashOfConfig":"11"},{"size":1260,"mtime":1645995953044,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x1bp7c",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\codefield\\csc301\\visualize_sorter_react\\src\\index.js",[],[],"E:\\codefield\\csc301\\visualize_sorter_react\\src\\serviceWorker.js",[],[],"E:\\codefield\\csc301\\visualize_sorter_react\\src\\App.js",[],[],"E:\\codefield\\csc301\\visualize_sorter_react\\src\\SortingVisualizer\\SortingVisualizer.jsx",["49","50","51","52","53","54","55","56"],[],"//import external dependencies:\r\nimport React from 'react';\r\nimport {getMergeSortAnimations} from '../sortinalgorithms/sortingAlgorithms.js'\r\nimport {getBubblesSortAnimations} from '../sortinalgorithms/BubbleSort.js'\r\nimport {getQuickSortAnimation} from '../sortinalgorithms/QuickSort.js'\r\nimport {getInsertionSortAnimation} from '../sortinalgorithms/insertionSort.js'\r\nimport {getSelectionSortAnimation} from '../sortinalgorithms/selectionSort.js'\r\nimport './SortingVisualizer.css';\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n//global variable to control the speed of the animation\r\n//for MERGE sort\r\nconst ANIMATION_SPEED_MS = 3;\r\n//number of array bars being displayed\r\nconst NUMBER_OF_ARRAY_BARS = 310; \r\n//main color of the array bars:\r\nconst PRIMARY_COLOR = 'turquoise';\r\n//the color of the array bar that is being compared throughout the sort\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n//the main function of the react app\r\nexport default class SortingVisualizer extends React.Component {\r\n    //sorting constructor:\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        number_bar : NUMBER_OF_ARRAY_BARS,\r\n        animation_speed : ANIMATION_SPEED_MS,\r\n        array: [],  //main array that would print out the element to be sorted.\r\n      };\r\n    }\r\n    \r\n    //when the component of the app is loaded, it will reset the current of element\r\n    componentDidMount() {\r\n      this.resetArray();\r\n    }\r\n\r\n    //resetting the array and generate new elements each time\r\n    resetArray(){\r\n        const array = [];\r\n        //generating random integer for sorting: \r\n        console.log(this.number_bar)\r\n        for(let i = 0; i <=  NUMBER_OF_ARRAY_BARS; i++)\r\n        {\r\n            //pushing the integer into the array: \r\n            array.push(randomIntGeneration(5, 730));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    //sorting alorithms:\r\n    mergeSortImpl()\r\n    {\r\n      this.disableWhenRunning()\r\n      //variable to intialize the animation for the current given array\r\n      const animation = getMergeSortAnimations(this.state.array);\r\n      for(let i = 0; i < animation.length; i++)\r\n      {\r\n        const arrayBar = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2; //NEED TO RESEARCH MORE ABOUT THIS\r\n        \r\n        if (i == animation.length - 1) {\r\n          console.log(\"possible\")\r\n          setTimeout(() => \r\n          {\r\n            this.enableafterRunning(i)\r\n          },i*this.animation_speed)\r\n        }\r\n        if(isColorChange)\r\n        {\r\n          const [barOneIndex, barTwoIndex] = animation[i];\r\n          const barOneStyle = arrayBar[barOneIndex].style;\r\n          const barTwoStyle = arrayBar[barTwoIndex].style;\r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.animation_speed);\r\n        } \r\n        else{\r\n          setTimeout(() => {\r\n            const [barOneIndex, newHeight] = animation[i];\r\n            const barOneStyle = arrayBar[barOneIndex].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n          }, i * this.animation_speed);\r\n        }\r\n      }\r\n    \r\n    } //end of mergeSortImpl\r\n\r\n    //Quick sort implementation:\r\n    quickSortImpl() {\r\n      \r\n      const animations = getQuickSortAnimation(this.state.array);\r\n      for (let i = 0; i < animations.length - 1; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n          const isColorChange = (i % 6 === 0) || (i % 6 === 1);\r\n          if(isColorChange === true) {\r\n              const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n              const [barOneIndex, barTwoIndex] = animations[i];\r\n              if(barOneIndex === -1) {\r\n                  continue;\r\n              }\r\n              const barOneStyle = arrayBars[barOneIndex].style;\r\n              const barTwoStyle = arrayBars[barTwoIndex].style;\r\n              setTimeout(() => {\r\n                  barOneStyle.backgroundColor = color;\r\n                  barTwoStyle.backgroundColor = color;\r\n              },i * this.animation_speed);\r\n          }\r\n          else {\r\n              const [barIndex, newHeight] = animations[i];\r\n              if (barIndex === -1) {\r\n                  continue;\r\n              }\r\n              const barStyle = arrayBars[barIndex].style;\r\n              setTimeout(() => {\r\n                  barStyle.height = `${newHeight}px`;\r\n              },i * this.animation_speed);  \r\n          }\r\n      }\r\n  }//end of quickSortImpl()\r\n\r\n  //Heap sort implementation:\r\n  heapSortImpl()\r\n  {\r\n\r\n  }//end of heapSortImpl()\r\n\r\n  //Insertion sort JS implementation:\r\n  insertionSortImpl()\r\n  {\r\n    const animation = getInsertionSortAnimation(this.state.array);\r\n    //looping though the animation array: \r\n    for(let i = 0; i < animation.length; i++)\r\n    {\r\n      const isColorChange = (animation[i][0] === \"comparison1\" || (animation[i][0] === \"comparison2\"));\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if(isColorChange)\r\n      {\r\n        const color = (animation[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const[temp, barOneIndex, barTwoIndex] = animation[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.animation_speed);\r\n      }\r\n      else{\r\n        const[temp, barIndex, newHeight] = animation[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * this.animation_speed);\r\n      }\r\n    }\r\n\r\n  }//end of insertionSortImpl()\r\n\r\n  selectionSortImpl() {\r\n    const animations = getSelectionSortAnimation(this.state.array);\r\n    //loop through the animation array to determine the changes of the color\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.animation_speed);\r\n        }\r\n        else {\r\n            const [temp, barIndex, newHeight] = animations[i];\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            },i * this.animation_speed);  \r\n        }\r\n    }\r\n  }//end of selection sort\r\n    disableWhenRunning(){\r\n      console.log(\"yyeyyyyyes\")\r\n      document.getElementById(\"button1\").disabled = true\r\n      document.getElementById(\"button2\").disabled = true\r\n      document.getElementById(\"button3\").disabled = true\r\n      document.getElementById(\"button4\").disabled = true\r\n      document.getElementById(\"button5\").disabled = true\r\n      document.getElementById(\"button6\").disabled = true\r\n    }\r\n    enableafterRunning(i){\r\n            document.getElementById(\"button1\").disabled = false\r\n            document.getElementById(\"button2\").disabled = false\r\n            document.getElementById(\"button3\").disabled = false\r\n            document.getElementById(\"button4\").disabled = false\r\n            document.getElementById(\"button5\").disabled = false\r\n            document.getElementById(\"button6\").disabled = false\r\n          \r\n      }\r\n    //bubble sort:\r\n    bubbleSortImpl()\r\n    {\r\n      //this.disableWhenRunning();\r\n      //variable to hold the animation return value from the bubble sort function\r\n      const animation = getBubblesSortAnimations(this.state.array);\r\n      for(let i = 0; i < animation.length; i++)\r\n      {\r\n        //extract the bar from the HTML side\r\n        const arrayBar = document.getElementsByClassName('array-bar');\r\n        const isColorChange = (i % 4 === 0) || (i % 4 === 1);\r\n        //if the color changed:\r\n        if(isColorChange)\r\n        {\r\n          const [barOneIndex, barTwoIndex] = animation[i];\r\n          const barOneStyle = arrayBar[barOneIndex].style;\r\n          const barTwoStyle = arrayBar[barTwoIndex].style;\r\n          const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          setTimeout(() =>\r\n            {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n\r\n            }, i * this.animation_speed);\r\n          if(i == animation.length - 1){\r\n            this.enableafterRunning(i)\r\n          }\r\n        }\r\n        //if the color has not changed:\r\n        else\r\n        {\r\n          const [barOneIndex, newHeight] = animation[i];\r\n          if (barOneIndex === -1)\r\n          {\r\n            continue;\r\n          }\r\n          const barStyle = arrayBar[barOneIndex].style;\r\n          setTimeout(() => {\r\n            barStyle.height = `${newHeight}px`;\r\n          }, i * this.animation_speed);\r\n        }\r\n\r\n      }\r\n\r\n    }//end of bubble sort implementation\r\n\r\n    //function to test all sorting algorithm for debugging\r\n    testSortingAlgorithms()\r\n    {\r\n      //the function will create 100 array with different length\r\n      for(var i = 0; i < 100; i++)\r\n      {\r\n        // create an array at each iteration: \r\n        const array = []\r\n        //each array will have various length from 1 to 1000 \r\n        for(var j = 0; j < randomIntGeneration(1, 1000); j++)\r\n        {\r\n          //the array will push element into it until the for loop is exhausted. \r\n          array.push(randomIntGeneration(0, 1000));\r\n        }//end for loop.\r\n\r\n        //testing the sorting algorithm: \r\n        const jsSortingBuiltIn = array.slice().sort((a,b) => a - b); //java built-in sorting function\r\n        const selectionSort = getSelectionSortAnimation(array.slice());\r\n        \r\n\r\n        console.log(checkArrayEqual(jsSortingBuiltIn, selectionSort));\r\n        \r\n      }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n\r\n          <div className=\"array-container\">\r\n            <div className='button'>\r\n            <Button id=\"button1\" onClick={() => this.resetArray()}>Generate New Array</Button>\r\n            <Button id=\"button2\" onClick={() => this.mergeSortImpl()}>Merge Sort</Button>\r\n            <Button id=\"button3\" onClick={() => this.quickSortImpl()}>Quick Sort</Button>\r\n            {/* <button onClick={() => this.heapSortImpl()}>Heap Sort</button> */}\r\n            <Button id=\"button4\" onClick={() => this.bubbleSortImpl()}>Bubble Sort</Button>\r\n            <Button id=\"button5\" onClick={() => this.insertionSortImpl()}>Insertion Sort</Button>\r\n            <Button id=\"button6\" onClick={() => this.selectionSortImpl()}>Selection Sort</Button>\r\n          </div>\r\n      \r\n          {array.map((value, idx) => (\r\n            <div className=\"array-bar\" key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n              > \r\n              </div>\r\n          ))}\r\n\r\n          \r\n         \r\n           \r\n         \r\n        </div>\r\n            \r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n//Function to generate random integer from 5 to 1000\r\nfunction randomIntGeneration(min, max) \r\n{\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n//Function to test if two array of elements equal to each other\r\nfunction checkArrayEqual(arr1, arr2)\r\n{\r\n  //if the two arrays are not equal to each other in length, then they are not equal.\r\n  if (arr1.length !== arr2.length)\r\n  {\r\n    return false;\r\n  }\r\n\r\n  // looping through each character and check if they are both equals\r\n  for (let i=0; i < arr1.length; i++)\r\n  {\r\n    if (arr1[i] !== arr2[i])\r\n    {\r\n      //array are equals\r\n      return false;\r\n      \r\n    }\r\n\r\n  }\r\n  return true;\r\n} //end of program\r\n","E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\sortingAlgorithms.js",["57","58","59","60"],[],"export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nexport function getBubbleSortAnimation(arr) {\r\n  const animations = [];\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (arr.length - i - 1 == 0) {\r\n      animations.push([4, 0]);\r\n    }\r\n    for (var j = 0; j < arr.length - i - 1; j++) {\r\n      animations.push([1, [j, j + 1]]);\r\n      if (arr[j] > arr[j + 1]) {\r\n        var temp = arr[j];\r\n        arr[j] = arr[j + 1];\r\n        arr[j + 1] = temp;\r\n      }\r\n      animations.push([3, [j, arr[j]]]);\r\n      animations.push([3, [j + 1, arr[j + 1]]]);\r\n      animations.push([2, [j, j + 1]]);\r\n      if (j + 1 == arr.length - i - 1) {\r\n        animations.push([4, j + 1]);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\nexport function getInsertionSortAnimation(inputArr) {\r\n  const animations = [];\r\n  let n = inputArr.length;\r\n  for (let i = 1; i < n; i++) {\r\n    // Choosing the first element in our unsorted subarray\r\n    let current = inputArr[i];\r\n    // The last element of our sorted subarray\r\n    let j = i - 1;\r\n    animations.push([2, [i, j]]);\r\n    while (j > -1 && current < inputArr[j]) {\r\n      inputArr[j + 1] = inputArr[j];\r\n      animations.push([1, [i, j]]);\r\n      animations.push([3, [j + 1, inputArr[j + 1]]]);\r\n      animations.push([2, [i, j]]);\r\n\r\n      j--;\r\n    }\r\n\r\n    inputArr[j + 1] = current;\r\n    if (i == n - 1) animations.push([4, i]);\r\n    animations.push([3, [j + 1, inputArr[j + 1]]]);\r\n  }\r\n  return animations;\r\n}\r\nexport function getSelectionSortAnimation(inputArr) {\r\n  const animations = [];\r\n  let n = inputArr.length;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    // Finding the smallest number in the subarray\r\n    let min = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      animations.push([1, [min, j]]);\r\n      animations.push([2, [min, j]]);\r\n      if (inputArr[j] < inputArr[min]) {\r\n        animations.push([3, min]);\r\n        min = j;\r\n        animations.push([4, min]);\r\n      }\r\n    }\r\n    if (min != i) {\r\n      // Swapping the elements\r\n      let tmp = inputArr[i];\r\n      inputArr[i] = inputArr[min];\r\n      inputArr[min] = tmp;\r\n    }\r\n    animations.push([5, [min, inputArr[min]]]);\r\n    animations.push([5, [i, inputArr[i]]]);\r\n    animations.push([3, min]);\r\n    animations.push([6, i]);\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport function getQuickSortAnimation(arr, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n\r\n  // Returns pivotIndex\r\n  let index = partition(arr, start, end, animations);\r\n\r\n  // Recursively apply the same logic to the left and right subarrays\r\n  getQuickSortAnimation(arr, start, index - 1, animations);\r\n  getQuickSortAnimation(arr, index + 1, end, animations);\r\n  return animations;\r\n}\r\n\r\nfunction partition(arr, start, end, animations) {\r\n  // Taking the last element as the pivot\r\n  const pivotValue = arr[end];\r\n  animations.push([-4, [1, end]]);\r\n  let pivotIndex = start;\r\n  for (let i = start; i < end; i++) {\r\n    animations.push([-1, [i, end]]);\r\n    animations.push([-1, [pivotIndex, end]]);\r\n    animations.push([-2, [i, end]]);\r\n    animations.push([-2, [pivotIndex, end]]);\r\n    if (arr[i] < pivotValue) {\r\n      // Swapping elements\r\n      [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n      // Moving to next element\r\n      animations.push([-3, [i, arr[i]]]);\r\n      animations.push([-3, [pivotIndex, arr[pivotIndex]]]);\r\n      pivotIndex++;\r\n    }\r\n  }\r\n  animations.push([-5, [1, end]]);\r\n\r\n  // Putting the pivot value in the middle\r\n  [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]];\r\n  animations.push([-3, [pivotIndex, arr[pivotIndex]]]);\r\n  animations.push([-3, [end, arr[end]]]);\r\n  return pivotIndex;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\BubbleSort.js",[],[],"E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\insertionSort.js",[],[],"E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\QuickSort.js",[],[],"E:\\codefield\\csc301\\visualize_sorter_react\\src\\sortinalgorithms\\selectionSort.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":9,"column":18,"nodeType":"63","messageId":"64","endLine":9,"endColumn":21},{"ruleId":"61","severity":1,"message":"65","line":9,"column":23,"nodeType":"63","messageId":"64","endLine":9,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":63,"column":15,"nodeType":"68","messageId":"69","endLine":63,"endColumn":17},{"ruleId":"61","severity":1,"message":"70","line":144,"column":15,"nodeType":"63","messageId":"64","endLine":144,"endColumn":19},{"ruleId":"61","severity":1,"message":"70","line":153,"column":15,"nodeType":"63","messageId":"64","endLine":153,"endColumn":19},{"ruleId":"61","severity":1,"message":"70","line":171,"column":20,"nodeType":"63","messageId":"64","endLine":171,"endColumn":24},{"ruleId":"61","severity":1,"message":"70","line":180,"column":20,"nodeType":"63","messageId":"64","endLine":180,"endColumn":24},{"ruleId":"66","severity":1,"message":"67","line":230,"column":16,"nodeType":"68","messageId":"69","endLine":230,"endColumn":18},{"ruleId":"66","severity":1,"message":"67","line":12,"column":28,"nodeType":"68","messageId":"69","endLine":12,"endColumn":30},{"ruleId":"66","severity":1,"message":"67","line":25,"column":17,"nodeType":"68","messageId":"69","endLine":25,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":51,"column":11,"nodeType":"68","messageId":"69","endLine":51,"endColumn":13},{"ruleId":"66","severity":1,"message":"71","line":72,"column":13,"nodeType":"68","messageId":"69","endLine":72,"endColumn":15},"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'temp' is assigned a value but never used.","Expected '!==' and instead saw '!='."]