{"ast":null,"code":"var _jsxFileName = \"E:\\\\codefield\\\\csc301\\\\visualize_sorter_react\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\n//import external dependencies:\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortinalgorithms/sortingAlgorithms.js';\nimport { getBubblesSortAnimations } from '../sortinalgorithms/BubbleSort.js';\nimport { getQuickSortAnimation } from '../sortinalgorithms/QuickSort.js';\nimport { getInsertionSortAnimation } from '../sortinalgorithms/insertionSort.js';\nimport { getSelectionSortAnimation } from '../sortinalgorithms/selectionSort.js';\nimport './SortingVisualizer.css';\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; //global variable to control the speed of the animation\n//for MERGE sort\n\nconst ANIMATION_SPEED_MS = 0.5; //number of array bars being displayed\n\nconst NUMBER_OF_ARRAY_BARS = 310; //main color of the array bars:\n\nconst PRIMARY_COLOR = 'turquoise'; //the color of the array bar that is being compared throughout the sort\n\nconst SECONDARY_COLOR = 'red'; //the main function of the react app\n\nexport default class SortingVisualizer extends React.Component {\n  //sorting constructor:\n  constructor(props) {\n    super(props);\n    this.state = {\n      terminate: false,\n      number_bar: NUMBER_OF_ARRAY_BARS,\n      animation_speed: ANIMATION_SPEED_MS,\n      array: [] //main array that would print out the element to be sorted.\n\n    };\n  } //when the component of the app is loaded, it will reset the current of element\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //resetting the array and generate new elements each time\n\n\n  resetArray() {\n    const array = []; //generating random integer for sorting: \n\n    for (let i = 0; i <= NUMBER_OF_ARRAY_BARS; i++) {\n      //pushing the integer into the array: \n      array.push(randomIntGeneration(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  disableWhenRunning() {\n    console.log(\"yyeyyyyyes\");\n    document.getElementById(\"button1\").disabled = true;\n    document.getElementById(\"button2\").disabled = true;\n    document.getElementById(\"button3\").disabled = true;\n    document.getElementById(\"button4\").disabled = true;\n    document.getElementById(\"button5\").disabled = true;\n    document.getElementById(\"button6\").disabled = true;\n  }\n\n  enableafterRunning(i) {\n    document.getElementById(\"button1\").disabled = false;\n    document.getElementById(\"button2\").disabled = false;\n    document.getElementById(\"button3\").disabled = false;\n    document.getElementById(\"button4\").disabled = false;\n    document.getElementById(\"button5\").disabled = false;\n    document.getElementById(\"button6\").disabled = false;\n  } //sorting alorithms:\n\n\n  mergeSortImpl() {\n    this.disableWhenRunning(); //variable to intialize the animation for the current given array\n\n    const animation = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animation.length; i++) {\n      const arrayBar = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //NEED TO RESEARCH MORE ABOUT THIS\n\n      if (i == animation.length - 1) {\n        console.log(\"possible\");\n        setTimeout(() => {\n          this.enableafterRunning(i);\n        }, i * this.state.animation_speed);\n      }\n\n      if (this.state.terminate) {\n        console.log(\"yes\");\n        this.setState({\n          terminate: false\n        });\n        break;\n      } // if (this.state.terminate){\n      //   this.resetArray()\n      //   this.setState({terminate:false})\n      //   break\n      // }\n\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animation[i];\n        const barOneStyle = arrayBar[barOneIndex].style;\n        const barTwoStyle = arrayBar[barTwoIndex].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIndex, newHeight] = animation[i];\n          const barOneStyle = arrayBar[barOneIndex].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.animation_speed);\n      }\n    }\n  } //end of mergeSortImpl\n  //Quick sort implementation:\n\n\n  quickSortImpl() {\n    this.disableWhenRunning();\n    const animations = getQuickSortAnimation(this.state.array);\n\n    for (let i = 0; i < animations.length - 1; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\n\n      if (i == animations.length - 3) {\n        console.log(\"possible\");\n        setTimeout(() => {\n          this.enableafterRunning(i);\n        }, i * this.state.animation_speed);\n      }\n\n      if (isColorChange === true) {\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n\n        if (barOneIndex === -1) {\n          continue;\n        }\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.state.animation_speed);\n      }\n    }\n  } //end of quickSortImpl()\n  //Heap sort implementation:\n\n\n  heapSortImpl() {} //end of heapSortImpl()\n  //Insertion sort JS implementation:\n\n\n  insertionSortImpl() {\n    this.disableWhenRunning();\n    const animation = getInsertionSortAnimation(this.state.array); //looping though the animation array: \n\n    for (let i = 0; i < animation.length; i++) {\n      if (i == animation.length - 2) {\n        console.log(\"possible\");\n        setTimeout(() => {\n          this.enableafterRunning(i);\n        }, i * this.state.animation_speed);\n      }\n\n      const isColorChange = animation[i][0] === \"comparison1\" || animation[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      if (isColorChange) {\n        const color = animation[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animation[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        const [temp, barIndex, newHeight] = animation[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.state.animation_speed);\n      }\n    }\n  } //end of insertionSortImpl()\n\n\n  selectionSortImpl() {\n    this.disableWhenRunning();\n    const animations = getSelectionSortAnimation(this.state.array); //loop through the animation array to determine the changes of the color\n\n    for (let i = 0; i < animations.length; i++) {\n      if (i == animations.length - 1) {\n        console.log(\"possible\");\n        setTimeout(() => {\n          this.enableafterRunning(i);\n        }, i * this.state.animation_speed);\n      }\n\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.state.animation_speed);\n      }\n    }\n  } //end of selection sort\n  //bubble sort:\n\n\n  bubbleSortImpl() {\n    //this.disableWhenRunning();\n    //variable to hold the animation return value from the bubble sort function\n    const animation = getBubblesSortAnimations(this.state.array);\n\n    for (let i = 0; i < animation.length; i++) {\n      //extract the bar from the HTML side\n      const arrayBar = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 4 === 0 || i % 4 === 1; //if the color changed:\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animation[i];\n        const barOneStyle = arrayBar[barOneIndex].style;\n        const barTwoStyle = arrayBar[barTwoIndex].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n\n        if (i == animation.length - 1) {\n          this.enableafterRunning(i);\n        }\n      } //if the color has not changed:\n      else {\n        const [barOneIndex, newHeight] = animation[i];\n\n        if (barOneIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBar[barOneIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * this.state.animation_speed);\n      }\n    }\n  } //end of bubble sort implementation\n  //function to test all sorting algorithm for debugging\n\n\n  testSortingAlgorithms() {\n    //the function will create 100 array with different length\n    for (var i = 0; i < 100; i++) {\n      // create an array at each iteration: \n      const array = []; //each array will have various length from 1 to 1000 \n\n      for (var j = 0; j < randomIntGeneration(1, 1000); j++) {\n        //the array will push element into it until the for loop is exhausted. \n        array.push(randomIntGeneration(0, 1000));\n      } //end for loop.\n      //testing the sorting algorithm: \n\n\n      const jsSortingBuiltIn = array.slice().sort((a, b) => a - b); //java built-in sorting function\n\n      const selectionSort = getSelectionSortAnimation(array.slice());\n      console.log(checkArrayEqual(jsSortingBuiltIn, selectionSort));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      id: \"button1\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 13\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(Button, {\n      id: \"button2\",\n      onClick: () => this.mergeSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(Button, {\n      id: \"button3\",\n      onClick: () => this.quickSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(Button, {\n      id: \"button4\",\n      onClick: () => this.bubbleSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(Button, {\n      id: \"button5\",\n      onClick: () => this.insertionSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(Button, {\n      id: \"button6\",\n      onClick: () => this.selectionSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }\n    }, \"Selection Sort\"), /*#__PURE__*/React.createElement(Button, {\n      id: \"button7\",\n      onClick: () => {\n        this.setState({\n          terminate: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 13\n      }\n    }, \"terminate\")), array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }\n    })));\n  }\n\n} //Function to generate random integer from 5 to 1000\n\nfunction randomIntGeneration(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} //Function to test if two array of elements equal to each other\n\n\nfunction checkArrayEqual(arr1, arr2) {\n  //if the two arrays are not equal to each other in length, then they are not equal.\n  if (arr1.length !== arr2.length) {\n    return false;\n  } // looping through each character and check if they are both equals\n\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      //array are equals\n      return false;\n    }\n  }\n\n  return true;\n} //end of program","map":{"version":3,"sources":["E:/codefield/csc301/visualize_sorter_react/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getBubblesSortAnimations","getQuickSortAnimation","getInsertionSortAnimation","getSelectionSortAnimation","Button","Row","Col","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","terminate","number_bar","animation_speed","array","componentDidMount","resetArray","i","push","randomIntGeneration","setState","disableWhenRunning","console","log","document","getElementById","disabled","enableafterRunning","mergeSortImpl","animation","length","arrayBar","getElementsByClassName","isColorChange","setTimeout","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","backgroundColor","newHeight","height","quickSortImpl","animations","arrayBars","barIndex","barStyle","heapSortImpl","insertionSortImpl","temp","selectionSortImpl","bubbleSortImpl","testSortingAlgorithms","j","jsSortingBuiltIn","slice","sort","a","b","selectionSort","checkArrayEqual","render","map","value","idx","min","max","Math","floor","random","arr1","arr2"],"mappings":"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","sourcesContent":["//import external dependencies:\r\nimport React from 'react';\r\nimport {getMergeSortAnimations} from '../sortinalgorithms/sortingAlgorithms.js'\r\nimport {getBubblesSortAnimations} from '../sortinalgorithms/BubbleSort.js'\r\nimport {getQuickSortAnimation} from '../sortinalgorithms/QuickSort.js'\r\nimport {getInsertionSortAnimation} from '../sortinalgorithms/insertionSort.js'\r\nimport {getSelectionSortAnimation} from '../sortinalgorithms/selectionSort.js'\r\nimport './SortingVisualizer.css';\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n//global variable to control the speed of the animation\r\n//for MERGE sort\r\nconst ANIMATION_SPEED_MS = 0.5;\r\n//number of array bars being displayed\r\nconst NUMBER_OF_ARRAY_BARS = 310; \r\n//main color of the array bars:\r\nconst PRIMARY_COLOR = 'turquoise';\r\n//the color of the array bar that is being compared throughout the sort\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n//the main function of the react app\r\nexport default class SortingVisualizer extends React.Component {\r\n    //sorting constructor:\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        terminate: false,\r\n        number_bar : NUMBER_OF_ARRAY_BARS,\r\n        animation_speed : ANIMATION_SPEED_MS,\r\n        array: [],  //main array that would print out the element to be sorted.\r\n      };\r\n    }\r\n    \r\n    //when the component of the app is loaded, it will reset the current of element\r\n    componentDidMount() {\r\n      this.resetArray();\r\n    }\r\n\r\n    //resetting the array and generate new elements each time\r\n    resetArray(){\r\n        const array = [];\r\n        //generating random integer for sorting: \r\n        for(let i = 0; i <=  NUMBER_OF_ARRAY_BARS; i++)\r\n        {\r\n            //pushing the integer into the array: \r\n            array.push(randomIntGeneration(5, 730));\r\n        }\r\n        this.setState({array});\r\n    }\r\n    disableWhenRunning(){\r\n      console.log(\"yyeyyyyyes\")\r\n      document.getElementById(\"button1\").disabled = true\r\n      document.getElementById(\"button2\").disabled = true\r\n      document.getElementById(\"button3\").disabled = true\r\n      document.getElementById(\"button4\").disabled = true\r\n      document.getElementById(\"button5\").disabled = true\r\n      document.getElementById(\"button6\").disabled = true\r\n    }\r\n    enableafterRunning(i){\r\n            document.getElementById(\"button1\").disabled = false\r\n            document.getElementById(\"button2\").disabled = false\r\n            document.getElementById(\"button3\").disabled = false\r\n            document.getElementById(\"button4\").disabled = false\r\n            document.getElementById(\"button5\").disabled = false\r\n            document.getElementById(\"button6\").disabled = false\r\n          \r\n      }\r\n\r\n    //sorting alorithms:\r\n    mergeSortImpl()\r\n    {\r\n      this.disableWhenRunning()\r\n      //variable to intialize the animation for the current given array\r\n      const animation = getMergeSortAnimations(this.state.array);\r\n      for(let i = 0; i < animation.length; i++)\r\n      {\r\n        const arrayBar = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2; //NEED TO RESEARCH MORE ABOUT THIS\r\n        \r\n        if (i == animation.length - 1) {\r\n          console.log(\"possible\")\r\n          setTimeout(() => \r\n          {\r\n            this.enableafterRunning(i)\r\n          },i*this.state.animation_speed)\r\n        }\r\n        if (this.state.terminate){\r\n          console.log(\"yes\")\r\n          this.setState({terminate:false})\r\n          break\r\n        }\r\n        // if (this.state.terminate){\r\n        //   this.resetArray()\r\n        //   this.setState({terminate:false})\r\n        //   break\r\n        // }\r\n        if(isColorChange)\r\n        {\r\n          const [barOneIndex, barTwoIndex] = animation[i];\r\n          const barOneStyle = arrayBar[barOneIndex].style;\r\n          const barTwoStyle = arrayBar[barTwoIndex].style;\r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.state.animation_speed);\r\n        } \r\n        else{\r\n          setTimeout(() => {\r\n            const [barOneIndex, newHeight] = animation[i];\r\n            const barOneStyle = arrayBar[barOneIndex].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n          }, i * this.state.animation_speed);\r\n        }\r\n      }\r\n    \r\n    } //end of mergeSortImpl\r\n    \r\n    //Quick sort implementation:\r\n    quickSortImpl() {\r\n      this.disableWhenRunning()\r\n      const animations = getQuickSortAnimation(this.state.array);\r\n      for (let i = 0; i < animations.length - 1; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n          const isColorChange = (i % 6 === 0) || (i % 6 === 1);\r\n          \r\n          if (i == animations.length - 3) {\r\n            console.log(\"possible\")\r\n            setTimeout(() => \r\n            {\r\n              \r\n              this.enableafterRunning(i)\r\n            },i*this.state.animation_speed)\r\n          }\r\n          if(isColorChange === true) {\r\n              const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n              const [barOneIndex, barTwoIndex] = animations[i];\r\n              if(barOneIndex === -1) {\r\n                  continue;\r\n              }\r\n              const barOneStyle = arrayBars[barOneIndex].style;\r\n              const barTwoStyle = arrayBars[barTwoIndex].style;\r\n              setTimeout(() => {\r\n                  barOneStyle.backgroundColor = color;\r\n                  barTwoStyle.backgroundColor = color;\r\n              },i * this.state.animation_speed);\r\n          }\r\n          else {\r\n              const [barIndex, newHeight] = animations[i];\r\n              if (barIndex === -1) {\r\n                  continue;\r\n              }\r\n              const barStyle = arrayBars[barIndex].style;\r\n              setTimeout(() => {\r\n                  barStyle.height = `${newHeight}px`;\r\n              },i * this.state.animation_speed);  \r\n          }\r\n      }\r\n  }//end of quickSortImpl()\r\n\r\n  //Heap sort implementation:\r\n  heapSortImpl()\r\n  {\r\n\r\n  }//end of heapSortImpl()\r\n\r\n  //Insertion sort JS implementation:\r\n  insertionSortImpl()\r\n  {\r\n    this.disableWhenRunning()\r\n    const animation = getInsertionSortAnimation(this.state.array);\r\n    //looping though the animation array: \r\n    for(let i = 0; i < animation.length; i++)\r\n    {\r\n      if (i == animation.length - 2) {\r\n        console.log(\"possible\")\r\n        setTimeout(() => \r\n        {\r\n          this.enableafterRunning(i)\r\n        },i*this.state.animation_speed)\r\n      }\r\n      const isColorChange = (animation[i][0] === \"comparison1\" || (animation[i][0] === \"comparison2\"));\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if(isColorChange)\r\n      {\r\n        const color = (animation[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const[temp, barOneIndex, barTwoIndex] = animation[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      }\r\n      else{\r\n        const[temp, barIndex, newHeight] = animation[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n\r\n  }//end of insertionSortImpl()\r\n\r\n  selectionSortImpl() {\r\n    this.disableWhenRunning()\r\n    const animations = getSelectionSortAnimation(this.state.array);\r\n    //loop through the animation array to determine the changes of the color\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i == animations.length - 1) {\r\n        console.log(\"possible\")\r\n        setTimeout(() => \r\n        {\r\n          \r\n          this.enableafterRunning(i)\r\n        },i*this.state.animation_speed)\r\n      }\r\n        const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.state.animation_speed);\r\n        }\r\n        else {\r\n            const [temp, barIndex, newHeight] = animations[i];\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            },i * this.state.animation_speed);  \r\n        }\r\n    }\r\n  }//end of selection sort\r\n    \r\n    //bubble sort:\r\n    bubbleSortImpl()\r\n    {\r\n      //this.disableWhenRunning();\r\n      //variable to hold the animation return value from the bubble sort function\r\n      const animation = getBubblesSortAnimations(this.state.array);\r\n      for(let i = 0; i < animation.length; i++)\r\n      {\r\n        //extract the bar from the HTML side\r\n        const arrayBar = document.getElementsByClassName('array-bar');\r\n        const isColorChange = (i % 4 === 0) || (i % 4 === 1);\r\n        //if the color changed:\r\n        if(isColorChange)\r\n        {\r\n          const [barOneIndex, barTwoIndex] = animation[i];\r\n          const barOneStyle = arrayBar[barOneIndex].style;\r\n          const barTwoStyle = arrayBar[barTwoIndex].style;\r\n          const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          setTimeout(() =>\r\n            {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n\r\n            }, i * this.state.animation_speed);\r\n          if(i == animation.length - 1){\r\n            this.enableafterRunning(i)\r\n          }\r\n        }\r\n        //if the color has not changed:\r\n        else\r\n        {\r\n          const [barOneIndex, newHeight] = animation[i];\r\n          if (barOneIndex === -1)\r\n          {\r\n            continue;\r\n          }\r\n          const barStyle = arrayBar[barOneIndex].style;\r\n          setTimeout(() => {\r\n            barStyle.height = `${newHeight}px`;\r\n          }, i * this.state.animation_speed);\r\n        }\r\n\r\n      }\r\n\r\n    }//end of bubble sort implementation\r\n\r\n    //function to test all sorting algorithm for debugging\r\n    testSortingAlgorithms()\r\n    {\r\n      //the function will create 100 array with different length\r\n      for(var i = 0; i < 100; i++)\r\n      {\r\n        // create an array at each iteration: \r\n        const array = []\r\n        //each array will have various length from 1 to 1000 \r\n        for(var j = 0; j < randomIntGeneration(1, 1000); j++)\r\n        {\r\n          //the array will push element into it until the for loop is exhausted. \r\n          array.push(randomIntGeneration(0, 1000));\r\n        }//end for loop.\r\n\r\n        //testing the sorting algorithm: \r\n        const jsSortingBuiltIn = array.slice().sort((a,b) => a - b); //java built-in sorting function\r\n        const selectionSort = getSelectionSortAnimation(array.slice());\r\n        \r\n\r\n        console.log(checkArrayEqual(jsSortingBuiltIn, selectionSort));\r\n        \r\n      }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n\r\n          <div className=\"array-container\">\r\n            <div className='button'>\r\n            <Button id=\"button1\" onClick={() => this.resetArray()}>Generate New Array</Button>\r\n            <Button id=\"button2\" onClick={() => this.mergeSortImpl()}>Merge Sort</Button>\r\n            <Button id=\"button3\" onClick={() => this.quickSortImpl()}>Quick Sort</Button>\r\n            {/* <button onClick={() => this.heapSortImpl()}>Heap Sort</button> */}\r\n            <Button id=\"button4\" onClick={() => this.bubbleSortImpl()}>Bubble Sort</Button>\r\n            <Button id=\"button5\" onClick={() => this.insertionSortImpl()}>Insertion Sort</Button>\r\n            <Button id=\"button6\" onClick={() => this.selectionSortImpl()}>Selection Sort</Button>\r\n            <Button id=\"button7\" onClick={()=>{this.setState({terminate:true})}}>terminate</Button>\r\n          </div>\r\n      \r\n          {array.map((value, idx) => (\r\n            <div className=\"array-bar\" key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n              > \r\n              </div>\r\n          ))}\r\n        </div>\r\n            \r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n//Function to generate random integer from 5 to 1000\r\nfunction randomIntGeneration(min, max) \r\n{\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n//Function to test if two array of elements equal to each other\r\nfunction checkArrayEqual(arr1, arr2)\r\n{\r\n  //if the two arrays are not equal to each other in length, then they are not equal.\r\n  if (arr1.length !== arr2.length)\r\n  {\r\n    return false;\r\n  }\r\n\r\n  // looping through each character and check if they are both equals\r\n  for (let i=0; i < arr1.length; i++)\r\n  {\r\n    if (arr1[i] !== arr2[i])\r\n    {\r\n      //array are equals\r\n      return false;\r\n      \r\n    }\r\n\r\n  }\r\n  return true;\r\n} //end of program\r\n"]},"metadata":{},"sourceType":"module"}