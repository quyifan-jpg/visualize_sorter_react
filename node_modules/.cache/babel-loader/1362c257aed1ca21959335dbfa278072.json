{"ast":null,"code":"var _jsxFileName = \"E:\\\\codefield\\\\csc301\\\\visualize_sorter_react\\\\src\\\\component\\\\mergePage.js\";\nimport React from \"react\";\n\nfunction MergeSort() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, \"Merge Sort \\u0398(nlogn)\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, \"Merge sort is a divide and conquer algorithm that was invented by John von Neumann in 1945.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"Conceptually, a merge sort works as follows: \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"1. Divide the unsorted list into n sublists, each containing one element (a list of one element is considered sorted).\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"2. Repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list.\", \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"Pseudo-code:\"), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, `\n        function merge(left, right)\n        var result := empty list\n    \n        while left is not empty and right is not empty do\n            if first(left) ≤ first(right) then\n                append first(left) to result\n                left := rest(left)\n            else\n                append first(right) to result\n                right := rest(right)\n    \n        // Either left or right may have elements left; consume them.\n        // (Only one of the following loops will actually be entered.)\n        while left is not empty do\n            append first(left) to result\n            left := rest(left)\n        while right is not empty do\n            append first(right) to result\n            right := rest(right)\n        return result\n          `), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"For more information, please refer to\", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Merge_sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \" Wikipedia.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"para\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/4VqmGXwpLqc\",\n    title: \"YouTube video player\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen\",\n    allowFullScreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default MergeSort;","map":{"version":3,"sources":["E:/codefield/csc301/visualize_sorter_react/src/component/mergePage.js"],"names":["React","MergeSort"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,SAAT,GAAqB;AACnB,sBACE,uDACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAHF,eAOE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDARF,eASE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HATF,eAaE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6IAE+D,GAF/D,CAbF,eAiBE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,eAkBE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;;;;;;;;;;;;;;;;;;;;;WADJ,CAnBF,eA2CE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAEE;AAAG,IAAA,IAAI,EAAC,0CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CA3CF,eA+CE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA/CF,eAgDE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhDF,eAiDE;AAAK,IAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAC,KADR;AAEE,IAAA,MAAM,EAAC,KAFT;AAGE,IAAA,GAAG,EAAC,2CAHN;AAIE,IAAA,KAAK,EAAC,sBAJR;AAKE,IAAA,WAAW,EAAC,GALd;AAME,IAAA,KAAK,EAAC,sGANR;AAOE,IAAA,eAAe,MAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjDF,CADF;AA+DD;;AAED,eAAeA,SAAf","sourcesContent":["import React from \"react\";\r\n\r\nfunction MergeSort() {\r\n  return (\r\n    <>\r\n      <div className=\"title\">Merge Sort &Theta;(nlogn)</div>\r\n      <hr></hr>\r\n      <div className=\"para\">\r\n        Merge sort is a divide and conquer algorithm that was invented by John\r\n        von Neumann in 1945.\r\n      </div>\r\n      <div className=\"para\">&nbsp;</div>\r\n      <div className=\"para\">Conceptually, a merge sort works as follows: </div>\r\n      <div className=\"para\">\r\n        1. Divide the unsorted list into n sublists, each containing one element\r\n        (a list of one element is considered sorted).\r\n      </div>\r\n      <div className=\"para\">\r\n        2. Repeatedly merge sublists to produce new sorted sublists until there\r\n        is only one sublist remaining. This will be the sorted list.{\" \"}\r\n      </div>\r\n      <div className=\"para\">&nbsp;</div>\r\n      <div className=\"para\">Pseudo-code:</div>\r\n      <pre>\r\n        {`\r\n        function merge(left, right)\r\n        var result := empty list\r\n    \r\n        while left is not empty and right is not empty do\r\n            if first(left) ≤ first(right) then\r\n                append first(left) to result\r\n                left := rest(left)\r\n            else\r\n                append first(right) to result\r\n                right := rest(right)\r\n    \r\n        // Either left or right may have elements left; consume them.\r\n        // (Only one of the following loops will actually be entered.)\r\n        while left is not empty do\r\n            append first(left) to result\r\n            left := rest(left)\r\n        while right is not empty do\r\n            append first(right) to result\r\n            right := rest(right)\r\n        return result\r\n          `}\r\n      </pre>\r\n      <div className=\"para\">\r\n        For more information, please refer to\r\n        <a href=\"https://en.wikipedia.org/wiki/Merge_sort\"> Wikipedia.</a>\r\n      </div>\r\n      <div className=\"para\">&nbsp;</div>\r\n      <div className=\"para\">&nbsp;</div>\r\n      <div className=\"cc\">\r\n        <iframe\r\n          width=\"560\"\r\n          height=\"315\"\r\n          src=\"https://www.youtube.com/embed/4VqmGXwpLqc\"\r\n          title=\"YouTube video player\"\r\n          frameBorder=\"0\"\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MergeSort;\r\n"]},"metadata":{},"sourceType":"module"}