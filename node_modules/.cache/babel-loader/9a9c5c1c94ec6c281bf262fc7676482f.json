{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nexport function getBubbleSortAnimation(arr) {\n  const animations = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (arr.length - i - 1 == 0) {\n      animations.push([4, 0]);\n    }\n\n    for (var j = 0; j < arr.length - i - 1; j++) {\n      animations.push([1, [j, j + 1]]);\n\n      if (arr[j] > arr[j + 1]) {\n        var temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n\n      animations.push([3, [j, arr[j]]]);\n      animations.push([3, [j + 1, arr[j + 1]]]);\n      animations.push([2, [j, j + 1]]);\n\n      if (j + 1 == arr.length - i - 1) {\n        animations.push([4, j + 1]);\n      }\n    }\n  }\n\n  return animations;\n}\nexport function getInsertionSortAnimation(inputArr) {\n  const animations = [];\n  let n = inputArr.length;\n\n  for (let i = 1; i < n; i++) {\n    // Choosing the first element in our unsorted subarray\n    let current = inputArr[i]; // The last element of our sorted subarray\n\n    let j = i - 1;\n    animations.push([2, [i, j]]);\n\n    while (j > -1 && current < inputArr[j]) {\n      inputArr[j + 1] = inputArr[j];\n      animations.push([1, [i, j]]);\n      animations.push([3, [j + 1, inputArr[j + 1]]]);\n      animations.push([2, [i, j]]);\n      j--;\n    }\n\n    inputArr[j + 1] = current;\n    if (i == n - 1) animations.push([4, i]);\n    animations.push([3, [j + 1, inputArr[j + 1]]]);\n  }\n\n  return animations;\n}\nexport function getSelectionSortAnimation(inputArr) {\n  const animations = [];\n  let n = inputArr.length;\n\n  for (let i = 0; i < n; i++) {\n    // Finding the smallest number in the subarray\n    let min = i;\n\n    for (let j = i + 1; j < n; j++) {\n      animations.push([1, [min, j]]);\n      animations.push([2, [min, j]]);\n\n      if (inputArr[j] < inputArr[min]) {\n        animations.push([3, min]);\n        min = j;\n        animations.push([4, min]);\n      }\n    }\n\n    if (min != i) {\n      // Swapping the elements\n      let tmp = inputArr[i];\n      inputArr[i] = inputArr[min];\n      inputArr[min] = tmp;\n    }\n\n    animations.push([5, [min, inputArr[min]]]);\n    animations.push([5, [i, inputArr[i]]]);\n    animations.push([3, min]);\n    animations.push([6, i]);\n  }\n\n  return animations;\n}\nexport function getQuickSortAnimation(arr, start, end, animations) {\n  if (start >= end) {\n    return;\n  } // Returns pivotIndex\n\n\n  let index = partition(arr, start, end, animations); // Recursively apply the same logic to the left and right subarrays\n\n  getQuickSortAnimation(arr, start, index - 1, animations);\n  getQuickSortAnimation(arr, index + 1, end, animations);\n  return animations;\n}\n\nfunction partition(arr, start, end, animations) {\n  // Taking the last element as the pivot\n  const pivotValue = arr[end];\n  animations.push([-4, [1, end]]);\n  let pivotIndex = start;\n\n  for (let i = start; i < end; i++) {\n    animations.push([-1, [i, end]]);\n    animations.push([-1, [pivotIndex, end]]);\n    animations.push([-2, [i, end]]);\n    animations.push([-2, [pivotIndex, end]]);\n\n    if (arr[i] < pivotValue) {\n      // Swapping elements\n      [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]]; // Moving to next element\n\n      animations.push([-3, [i, arr[i]]]);\n      animations.push([-3, [pivotIndex, arr[pivotIndex]]]);\n      pivotIndex++;\n    }\n  }\n\n  animations.push([-5, [1, end]]); // Putting the pivot value in the middle\n\n  [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]];\n  animations.push([-3, [pivotIndex, arr[pivotIndex]]]);\n  animations.push([-3, [end, arr[end]]]);\n  return pivotIndex;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["E:/codefield/csc301/visualize_sorter_react/src/sortinalgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","getBubbleSortAnimation","arr","i","push","j","temp","getInsertionSortAnimation","inputArr","n","current","getSelectionSortAnimation","min","tmp","getQuickSortAnimation","start","end","index","partition","pivotValue","pivotIndex","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nexport function getBubbleSortAnimation(arr) {\r\n  const animations = [];\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (arr.length - i - 1 == 0) {\r\n      animations.push([4, 0]);\r\n    }\r\n    for (var j = 0; j < arr.length - i - 1; j++) {\r\n      animations.push([1, [j, j + 1]]);\r\n      if (arr[j] > arr[j + 1]) {\r\n        var temp = arr[j];\r\n        arr[j] = arr[j + 1];\r\n        arr[j + 1] = temp;\r\n      }\r\n      animations.push([3, [j, arr[j]]]);\r\n      animations.push([3, [j + 1, arr[j + 1]]]);\r\n      animations.push([2, [j, j + 1]]);\r\n      if (j + 1 == arr.length - i - 1) {\r\n        animations.push([4, j + 1]);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\nexport function getInsertionSortAnimation(inputArr) {\r\n  const animations = [];\r\n  let n = inputArr.length;\r\n  for (let i = 1; i < n; i++) {\r\n    // Choosing the first element in our unsorted subarray\r\n    let current = inputArr[i];\r\n    // The last element of our sorted subarray\r\n    let j = i - 1;\r\n    animations.push([2, [i, j]]);\r\n    while (j > -1 && current < inputArr[j]) {\r\n      inputArr[j + 1] = inputArr[j];\r\n      animations.push([1, [i, j]]);\r\n      animations.push([3, [j + 1, inputArr[j + 1]]]);\r\n      animations.push([2, [i, j]]);\r\n\r\n      j--;\r\n    }\r\n\r\n    inputArr[j + 1] = current;\r\n    if (i == n - 1) animations.push([4, i]);\r\n    animations.push([3, [j + 1, inputArr[j + 1]]]);\r\n  }\r\n  return animations;\r\n}\r\nexport function getSelectionSortAnimation(inputArr) {\r\n  const animations = [];\r\n  let n = inputArr.length;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    // Finding the smallest number in the subarray\r\n    let min = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      animations.push([1, [min, j]]);\r\n      animations.push([2, [min, j]]);\r\n      if (inputArr[j] < inputArr[min]) {\r\n        animations.push([3, min]);\r\n        min = j;\r\n        animations.push([4, min]);\r\n      }\r\n    }\r\n    if (min != i) {\r\n      // Swapping the elements\r\n      let tmp = inputArr[i];\r\n      inputArr[i] = inputArr[min];\r\n      inputArr[min] = tmp;\r\n    }\r\n    animations.push([5, [min, inputArr[min]]]);\r\n    animations.push([5, [i, inputArr[i]]]);\r\n    animations.push([3, min]);\r\n    animations.push([6, i]);\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport function getQuickSortAnimation(arr, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n\r\n  // Returns pivotIndex\r\n  let index = partition(arr, start, end, animations);\r\n\r\n  // Recursively apply the same logic to the left and right subarrays\r\n  getQuickSortAnimation(arr, start, index - 1, animations);\r\n  getQuickSortAnimation(arr, index + 1, end, animations);\r\n  return animations;\r\n}\r\n\r\nfunction partition(arr, start, end, animations) {\r\n  // Taking the last element as the pivot\r\n  const pivotValue = arr[end];\r\n  animations.push([-4, [1, end]]);\r\n  let pivotIndex = start;\r\n  for (let i = start; i < end; i++) {\r\n    animations.push([-1, [i, end]]);\r\n    animations.push([-1, [pivotIndex, end]]);\r\n    animations.push([-2, [i, end]]);\r\n    animations.push([-2, [pivotIndex, end]]);\r\n    if (arr[i] < pivotValue) {\r\n      // Swapping elements\r\n      [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n      // Moving to next element\r\n      animations.push([-3, [i, arr[i]]]);\r\n      animations.push([-3, [pivotIndex, arr[pivotIndex]]]);\r\n      pivotIndex++;\r\n    }\r\n  }\r\n  animations.push([-5, [1, end]]);\r\n\r\n  // Putting the pivot value in the middle\r\n  [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]];\r\n  animations.push([-3, [pivotIndex, arr[pivotIndex]]]);\r\n  animations.push([-3, [end, arr[end]]]);\r\n  return pivotIndex;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}