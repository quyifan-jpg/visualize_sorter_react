{"ast":null,"code":"export function getSelectionSortAnimation(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  selectionSort(auxillaryArray, animations);\n  return animations;\n} //function to handle the selection sort algorithm\n\nfunction selectionSort(auxillaryArray, animations) {\n  const length = auxillaryArray.length;\n\n  for (let i = 0; i < length - 1; i++) {\n    let minIndex = i; //Finding minimum element in unsorted array\n\n    for (let j = i + 1; j < length; j++) {\n      animations.push([\"comparision1\", j, minIndex]);\n      animations.push([\"comparision2\", j, minIndex]);\n\n      if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n        minIndex = j;\n      }\n    }\n\n    animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n    animations.push([\"swap\", i, auxillaryArray[minIndex]]); // Swap the found minimum element with the first element\n\n    swap(auxillaryArray, minIndex, i);\n  }\n} //helper method to swap element within an array\n\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}","map":{"version":3,"sources":["E:/codefield/csc301/visualize_sorter_react/src/sortinalgorithms/selectionSort.js"],"names":["getSelectionSortAnimation","array","animations","auxillaryArray","slice","selectionSort","length","i","minIndex","j","push","swap","firstIndex","secondIndex","temp"],"mappings":"AAAA,OAAO,SAASA,yBAAT,CAAmCC,KAAnC,EAA0C;AAC7C,MAAIC,UAAU,GAAI,EAAlB;AACA,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;AACAC,EAAAA,aAAa,CAACF,cAAD,EAAiBD,UAAjB,CAAb;AACA,SAAOA,UAAP;AACH,C,CACD;;AACA,SAASG,aAAT,CAAuBF,cAAvB,EAAuCD,UAAvC,EAAmD;AAC/C,QAAMI,MAAM,GAAGH,cAAc,CAACG,MAA9B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,GAAG,CAA7B,EAAgCC,CAAC,EAAjC,EAAqC;AACjC,QAAIC,QAAQ,GAAGD,CAAf,CADiC,CACf;;AAClB,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAGH,MAAxB,EAAgCG,CAAC,EAAjC,EAAqC;AACjCP,MAAAA,UAAU,CAACQ,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBD,QAApB,CAAhB;AACAN,MAAAA,UAAU,CAACQ,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBD,QAApB,CAAhB;;AACA,UAAIL,cAAc,CAACM,CAAD,CAAd,GAAoBN,cAAc,CAACK,QAAD,CAAtC,EAAkD;AAC9CA,QAAAA,QAAQ,GAAGC,CAAX;AACH;AACJ;;AACDP,IAAAA,UAAU,CAACQ,IAAX,CAAgB,CAAC,MAAD,EAASF,QAAT,EAAmBL,cAAc,CAACI,CAAD,CAAjC,CAAhB;AACAL,IAAAA,UAAU,CAACQ,IAAX,CAAgB,CAAC,MAAD,EAASH,CAAT,EAAYJ,cAAc,CAACK,QAAD,CAA1B,CAAhB,EAViC,CAWjC;;AACAG,IAAAA,IAAI,CAACR,cAAD,EAAiBK,QAAjB,EAA2BD,CAA3B,CAAJ;AACH;AACJ,C,CAED;;;AACA,SAASI,IAAT,CAAcR,cAAd,EAA8BS,UAA9B,EAA0CC,WAA1C,EAAuD;AACnD,MAAIC,IAAI,GAAGX,cAAc,CAACS,UAAD,CAAzB;AACAT,EAAAA,cAAc,CAACS,UAAD,CAAd,GAA6BT,cAAc,CAACU,WAAD,CAA3C;AACAV,EAAAA,cAAc,CAACU,WAAD,CAAd,GAA8BC,IAA9B;AACH","sourcesContent":["export function getSelectionSortAnimation(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    return animations;\r\n}\r\n//function to handle the selection sort algorithm\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const length = auxillaryArray.length;\r\n    for (let i = 0; i < length - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < length; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\n//helper method to swap element within an array\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}