{"ast":null,"code":"//Function to handle bubble sort:\nexport function getBubblesSortAnimations(array) {\n  //variable to hold the animation list of the array\n  const animation = []; //make a copy of each element into another array\n\n  const auxiliaryArray = array.slice(); //sort the array through bubble sort\n\n  bubbleSort(animation, auxiliaryArray);\n  return animation;\n} //end of bubble sort\n//Function to sort the array using bubble sort\n\nfunction bubbleSort(animation, array) {\n  //looping through the array and chek if each element is on the right order or not\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      animation.push([j, j + 1]);\n      animation.push([j, j + 1]);\n\n      if (array[j] > array[j + 1]) {\n        animation.push([j, array[j + 1]]);\n        animation.push([j + 1, array[j]]); //swap the elment if they are not in the right order\n\n        swap(j, j + 1, array);\n      } else {\n        //the array is already sorted\n        animation.push([-1, -1]);\n        animation.push([-1, -1]);\n      }\n    }\n  }\n} //end of bubbleSort(animation, array)\n//Helper method to swap the elemenet: \n\n\nfunction swap(before, after, array) {\n  //swap the element:\n  let temp = array[before];\n  array[before] = array[after];\n  array[after] = temp;\n} //end of swap()","map":{"version":3,"sources":["E:/codefield/csc301/visualize_sorter_react/src/sortinalgorithms/BubbleSort.js"],"names":["getBubblesSortAnimations","array","animation","auxiliaryArray","slice","bubbleSort","i","length","j","push","swap","before","after","temp"],"mappings":"AAAA;AACA,OAAO,SAASA,wBAAT,CAAkCC,KAAlC,EAAyC;AAC5C;AACA,QAAMC,SAAS,GAAG,EAAlB,CAF4C,CAG5C;;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAAvB,CAJ4C,CAK5C;;AACAC,EAAAA,UAAU,CAACH,SAAD,EAAYC,cAAZ,CAAV;AACA,SAAOD,SAAP;AACD,C,CAAA;AAEH;;AACA,SAASG,UAAT,CAAoBH,SAApB,EAA+BD,KAA/B,EACA;AAEI;AACA,OAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,KAAK,CAACM,MAAN,GAAe,CAAlC,EAAqCD,CAAC,EAAtC,EACA;AACI,SAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,KAAK,CAACM,MAAN,GAAeD,CAAf,GAAmB,CAAtC,EAAyCE,CAAC,EAA1C,EACA;AACIN,MAAAA,SAAS,CAACO,IAAV,CAAe,CAACD,CAAD,EAAIA,CAAC,GAAC,CAAN,CAAf;AACAN,MAAAA,SAAS,CAACO,IAAV,CAAe,CAACD,CAAD,EAAIA,CAAC,GAAC,CAAN,CAAf;;AACA,UAAGP,KAAK,CAACO,CAAD,CAAL,GAAWP,KAAK,CAACO,CAAC,GAAC,CAAH,CAAnB,EACA;AACIN,QAAAA,SAAS,CAACO,IAAV,CAAe,CAACD,CAAD,EAAIP,KAAK,CAACO,CAAC,GAAC,CAAH,CAAT,CAAf;AACAN,QAAAA,SAAS,CAACO,IAAV,CAAe,CAACD,CAAC,GAAG,CAAL,EAAQP,KAAK,CAACO,CAAD,CAAb,CAAf,EAFJ,CAGI;;AACAE,QAAAA,IAAI,CAACF,CAAD,EAAIA,CAAC,GAAC,CAAN,EAASP,KAAT,CAAJ;AAEH,OAPD,MASI;AACA;AACAC,QAAAA,SAAS,CAACO,IAAV,CAAe,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,CAAf;AACAP,QAAAA,SAAS,CAACO,IAAV,CAAe,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,CAAf;AACH;AACJ;AACJ;AACJ,C,CAAA;AAGD;;;AACA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BX,KAA7B,EACA;AAEI;AACA,MAAIY,IAAI,GAAGZ,KAAK,CAACU,MAAD,CAAhB;AACAV,EAAAA,KAAK,CAACU,MAAD,CAAL,GAAgBV,KAAK,CAACW,KAAD,CAArB;AACAX,EAAAA,KAAK,CAACW,KAAD,CAAL,GAAeC,IAAf;AACH,C,CAAA","sourcesContent":["//Function to handle bubble sort:\r\nexport function getBubblesSortAnimations(array) {\r\n    //variable to hold the animation list of the array\r\n    const animation = [];\r\n    //make a copy of each element into another array\r\n    const auxiliaryArray = array.slice();\r\n    //sort the array through bubble sort\r\n    bubbleSort(animation, auxiliaryArray);\r\n    return animation;\r\n  }//end of bubble sort\r\n\r\n//Function to sort the array using bubble sort\r\nfunction bubbleSort(animation, array)\r\n{\r\n    \r\n    //looping through the array and chek if each element is on the right order or not\r\n    for(let i = 0; i < array.length - 1; i++)\r\n    {\r\n        for(let j = 0; j < array.length - i - 1; j++)\r\n        {\r\n            animation.push([j, j+1]);\r\n            animation.push([j, j+1]);\r\n            if(array[j] > array[j+1])\r\n            {\r\n                animation.push([j, array[j+1]]);\r\n                animation.push([j + 1, array[j]]);\r\n                //swap the elment if they are not in the right order\r\n                swap(j, j+1, array);\r\n\r\n            }\r\n\r\n            else{\r\n                //the array is already sorted\r\n                animation.push([-1,-1]);\r\n                animation.push([-1,-1]);\r\n            }\r\n        }\r\n    }\r\n}//end of bubbleSort(animation, array)\r\n  \r\n\r\n//Helper method to swap the elemenet: \r\nfunction swap(before, after, array)\r\n{\r\n    \r\n    //swap the element:\r\n    let temp = array[before]; \r\n    array[before] = array[after];\r\n    array[after] = temp;\r\n}//end of swap()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   "]},"metadata":{},"sourceType":"module"}