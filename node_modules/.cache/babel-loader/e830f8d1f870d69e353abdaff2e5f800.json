{"ast":null,"code":"//The entire insertion sort implementation of this project\nexport function getInsertionSortAnimation(array) {\n  //animation array:\n  let animation = [];\n  let auxilaryArray = array.slice(); //implemnent insertion sort and animation\n\n  insertionSort(auxilaryArray, animation);\n  return animation;\n} //end of getInsertionSortAlgorithm()\n\nfunction insertionSort(array, animation) {\n  //looping through the array starting from index 1 because index 0 is assumed to be the sorted part of the array:\n  for (let i = 1; i < array.length; i++) {\n    let value = array[i];\n    let hole = i - 1; //changing the color of the elements:\n\n    animation.push([\"comparison1\", hole, i]);\n    animation.push([\"comparison2\", hole, i]); //the index is not in 0 and the previous is greater than the current value:\n\n    while (hole >= 0 && array[hole] > value) {\n      animation.push(['overwrite', hole + 1, array[hole]]); //swap the elements\n\n      array[hole + 1] = array[hole];\n      hole--;\n\n      if (hole >= 0) {\n        animation.push([\"comparison1\", hole, i]);\n        animation.push([\"comparison2\", hole, i]);\n      }\n    }\n\n    animation.push([\"overwrite\", hole + 1, value]);\n    array[hole + 1] = value;\n  }\n}","map":{"version":3,"sources":["E:/codefield/csc301/visualize_sorter_react/src/sortinalgorithms/insertionSort.js"],"names":["getInsertionSortAnimation","array","animation","auxilaryArray","slice","insertionSort","i","length","value","hole","push"],"mappings":"AAAA;AACA,OAAO,SAASA,yBAAT,CAAmCC,KAAnC,EAAyC;AAC5C;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,aAAa,GAAGF,KAAK,CAACG,KAAN,EAApB,CAH4C,CAI5C;;AACAC,EAAAA,aAAa,CAACF,aAAD,EAAgBD,SAAhB,CAAb;AACA,SAAOA,SAAP;AACH,C,CAAA;;AAGD,SAASG,aAAT,CAAuBJ,KAAvB,EAA8BC,SAA9B,EACA;AACI;AACA,OAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,KAAK,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EACA;AACI,QAAIE,KAAK,GAAGP,KAAK,CAACK,CAAD,CAAjB;AACA,QAAIG,IAAI,GAAGH,CAAC,GAAG,CAAf,CAFJ,CAGI;;AACAJ,IAAAA,SAAS,CAACQ,IAAV,CAAe,CAAC,aAAD,EAAgBD,IAAhB,EAAsBH,CAAtB,CAAf;AACAJ,IAAAA,SAAS,CAACQ,IAAV,CAAe,CAAC,aAAD,EAAgBD,IAAhB,EAAsBH,CAAtB,CAAf,EALJ,CAMI;;AACA,WAAMG,IAAI,IAAI,CAAR,IAAaR,KAAK,CAACQ,IAAD,CAAL,GAAcD,KAAjC,EACA;AACIN,MAAAA,SAAS,CAACQ,IAAV,CAAe,CAAC,WAAD,EAAcD,IAAI,GAAG,CAArB,EAAwBR,KAAK,CAACQ,IAAD,CAA7B,CAAf,EADJ,CAEI;;AACAR,MAAAA,KAAK,CAACQ,IAAI,GAAC,CAAN,CAAL,GAAgBR,KAAK,CAACQ,IAAD,CAArB;AACAA,MAAAA,IAAI;;AACJ,UAAGA,IAAI,IAAG,CAAV,EAAY;AACRP,QAAAA,SAAS,CAACQ,IAAV,CAAe,CAAC,aAAD,EAAgBD,IAAhB,EAAsBH,CAAtB,CAAf;AACAJ,QAAAA,SAAS,CAACQ,IAAV,CAAe,CAAC,aAAD,EAAgBD,IAAhB,EAAsBH,CAAtB,CAAf;AACH;AACJ;;AAEDJ,IAAAA,SAAS,CAACQ,IAAV,CAAe,CAAC,WAAD,EAAcD,IAAI,GAAG,CAArB,EAAwBD,KAAxB,CAAf;AACAP,IAAAA,KAAK,CAACQ,IAAI,GAAG,CAAR,CAAL,GAAkBD,KAAlB;AACH;AAEJ","sourcesContent":["//The entire insertion sort implementation of this project\r\nexport function getInsertionSortAnimation(array){\r\n    //animation array:\r\n    let animation = [];\r\n    let auxilaryArray = array.slice();\r\n    //implemnent insertion sort and animation\r\n    insertionSort(auxilaryArray, animation);\r\n    return animation;\r\n}//end of getInsertionSortAlgorithm()\r\n\r\n\r\nfunction insertionSort(array, animation)\r\n{\r\n    //looping through the array starting from index 1 because index 0 is assumed to be the sorted part of the array:\r\n    for(let i = 1; i < array.length; i++)\r\n    {\r\n        let value = array[i];\r\n        let hole = i - 1;\r\n        //changing the color of the elements:\r\n        animation.push([\"comparison1\", hole, i]);\r\n        animation.push([\"comparison2\", hole, i]);\r\n        //the index is not in 0 and the previous is greater than the current value:\r\n        while(hole >= 0 && array[hole] > value)\r\n        {\r\n            animation.push(['overwrite', hole + 1, array[hole]]);\r\n            //swap the elements\r\n            array[hole+1] = array[hole]; \r\n            hole--; \r\n            if(hole >=0){\r\n                animation.push([\"comparison1\", hole, i]);\r\n                animation.push([\"comparison2\", hole, i]);\r\n            }\r\n        }\r\n\r\n        animation.push([\"overwrite\", hole + 1, value]);\r\n        array[hole + 1] = value;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}